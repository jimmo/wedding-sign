import pyb
import hcsr04
import utime
import math
import micropython
import random
import gc

strip = pyb.SPI(1, pyb.SPI.MASTER, baudrate=4000000, crc=None, bits=8, firstbit=pyb.SPI.MSB, phase=1)

dist = [hcsr04.HCSR04(machine.Pin(p), machine.Pin(p)) for p in ('X1', 'X2', 'X3', 'X4')]
dist_mm = [200, 200, 200, 200]

@micropython.native
def rainbow(h, rgb):
  if h < 20:
    rgb[0] = 255
    rgb[1] = (h * 255) // 20
    rgb[2] = 0
  elif h < 40:
    rgb[0] = ((40-h) * 255) // 20
    rgb[1] = 255
    rgb[2] = 0
  elif h < 60:
    rgb[0] = 0
    rgb[1] = 255
    rgb[2] = ((h-40) * 255) // 20
  elif h < 80:
    rgb[0] = 0
    rgb[1] = ((80-h) * 255) // 20
    rgb[2] = 255
  elif h < 100:
    rgb[0] = ((h-80) * 255) // 20
    rgb[1] = 0
    rgb[2] = 255
  else:
    rgb[0] = 255
    rgb[1] = 0
    rgb[2] = ((120-h) * 255) // 20

LEDS = 722
pixeldata = bytearray(4 + LEDS*4 + 20*4)

RAINBOW_COLORS = []

COORDS = [
  (0,9,),(0,10,),(0,11,),(0,12,),(0,13,),(0,14,),(1,15,),(1,14,),(1,13,),(1,12,),(1,11,),(1,10,),(1,9,),(1,8,),(2,6,),(2,7,),(2,8,),(2,9,),(2,10,),(2,11,),(2,12,),(2,13,),(2,14,),(2,15,),(2,16,),(3,16,),(3,15,),(3,14,),(4,14,),(4,15,),(4,16,),(5,16,),(5,15,),(6,14,),(6,15,),(6,16,),(7,16,),(7,15,),(7,14,),(8,14,),(8,15,),(3,11,),(3,10,),(3,9,),(3,8,),(3,7,),(3,6,),(4,5,),(4,6,),(4,7,),(5,7,),(5,6,),(5,5,),(6,5,),(6,6,),(7,7,),(7,6,),(7,5,),(8,5,),(8,6,),(8,7,),(8,8,),(8,9,),(8,10,),(9,10,),(9,9,),(9,8,),(9,7,),(9,6,),(10,7,),(10,8,),(7,9,),(7,10,),(7,11,),(6,11,),(6,10,),(5,10,),(5,11,),(4,11,),(4,10,),  # e

  (12,10,),(12,11,),(12,12,),(12,13,),(12,14,),(13,15,),(13,14,),(13,13,),(13,12,),(13,11,),(13,10,),(13,9,),(13,8,),(13,7,),(14,6,),(14,7,),(14,8,),(14,9,),(14,10,),(14,11,),(14,12,),(14,13,),(14,14,),(14,15,),(14,16,),(15,16,),(15,15,),(15,14,),(16,14,),(16,15,),(16,16,),(17,15,),(17,14,),(18,13,),(18,14,),(18,15,),(19,16,),(19,15,),(19,14,),(19,13,),(19,12,),(19,11,),(19,10,),(20,16,),(20,15,),(20,14,),(20,13,),(20,12,),(20,11,),(20,10,),(20,9,),(20,8,),(20,7,),(20,6,),(20,5,),(21,1,),(21,2,),(21,3,),(21,4,),(21,5,),(21,6,),(21,7,),(21,8,),(21,9,),(21,10,),(21,11,),(21,12,),(21,13,),(21,14,),(22,9,),(22,8,),(22,7,),(22,6,),(22,5,),(22,4,),(22,3,),(22,2,),(22,1,),(22,0,),(23,0,),(23,1,),(23,2,),(23,3,),(23,4,),(23,5,),(24,0,),(19,6,),(19,7,),(19,8,),(18,7,),(18,6,),(18,5,),(17,5,),(17,6,),(17,7,),(16,8,),(16,7,),(16,6,),(16,5,),(15,6,),(15,7,),(15,8,),(15,9,),(15,10,),  # d1

  (25,10,),(25,11,),(25,12,),(25,13,),(25,14,),(26,15,),(26,14,),(26,13,),(26,12,),(26,11,),(26,10,),(26,9,),(26,8,),(26,7,),(27,6,),(27,7,),(27,8,),(27,9,),(27,10,),(27,11,),(27,12,),(27,13,),(27,14,),(27,15,),(27,16,),(28,16,),(28,15,),(28,14,),(29,14,),(29,15,),(29,16,),(30,15,),(30,14,),(31,13,),(31,14,),(31,15,),(32,16,),(32,15,),(32,14,),(32,13,),(32,12,),(32,11,),(32,10,),(33,16,),(33,15,),(33,14,),(33,13,),(33,12,),(33,11,),(33,10,),(33,9,),(33,8,),(33,7,),(33,6,),(33,5,),(34,1,),(34,2,),(34,3,),(34,4,),(34,5,),(34,6,),(34,7,),(34,8,),(34,9,),(34,10,),(34,11,),(34,12,),(34,13,),(34,14,),(35,9,),(35,8,),(35,7,),(35,6,),(35,5,),(35,4,),(35,3,),(35,2,),(35,1,),(35,0,),(36,0,),(36,1,),(36,2,),(36,3,),(36,4,),(36,5,),(37,0,),(32,6,),(32,7,),(32,8,),(31,7,),(31,6,),(31,5,),(30,5,),(30,6,),(30,7,),(29,8,),(29,7,),(29,6,),(29,5,),(28,6,),(28,7,),(28,8,),(28,9,),(28,10,),  # d2

  (35,18,),(35,19,),(35,20,),(36,21,),(36,20,),(36,19,),(36,18,),(37,19,),(37,20,),(37,21,),(38,21,),(38,20,),(38,19,),(39,18,),(39,19,),(39,20,),(40,20,),(40,19,),(40,18,),(40,17,),(40,16,),(40,15,),(40,14,),(40,13,),(40,12,),(40,11,),(40,10,),(40,9,),(40,8,),(40,7,),(40,6,),(40,5,),(41,7,),(41,8,),(41,9,),(41,10,),(41,11,),(41,12,),(41,13,),(41,14,),(41,15,),(41,16,),(41,17,),(41,18,),(41,19,),(42,17,),(42,16,),(42,15,),(42,14,),(42,13,),(42,12,),(43,10,),(43,11,),(43,12,),(43,13,),(43,14,),(43,15,),(44,13,),(44,12,),(44,11,),(44,10,),(44,9,),(44,8,),(45,6,),(45,7,),(45,8,),(45,9,),(45,10,),(45,11,),(45,12,),(46,10,),(46,9,),(46,8,),(46,7,),(46,6,),(46,5,),(47,5,),(47,6,),(47,7,),(47,8,),(48,6,),(48,5,),(39,13,),(39,12,),(39,11,),(39,10,),(39,9,),(39,8,),(39,7,),(39,6,),(39,5,),(38,6,),(38,7,),  # y

  (8, 24), (8, 25), (9, 25), (9, 24), (9, 23), (9, 22), (9, 21), (9, 20), (10, 21), (10, 22), (10, 23), (10, 24), (8, 22), (8, 21), (8, 20), (7, 20), (7, 21), (6, 22), (6, 21), (6, 20), (5, 21), (5, 22), (5, 23), (5, 24), (5, 25), (5, 26), (5, 27), (6, 28), (6, 27), (6, 26), (6, 25), (6, 24), (7, 25), (7, 26), (7, 27), (7, 28), (7, 29), (7, 30), (7, 31), (7, 32), (8, 31), (8, 30), (8, 29), (8, 28), (8, 27), (9, 29), (9, 30), (9, 31), (9, 32), (10, 32), (10, 31), (10, 30), (10, 29), (10, 28), (10, 27), (11, 26), (11, 27), (11, 28), (11, 29), (12, 27), (12, 26), (11, 31), (11, 32), (6, 31), (6, 32), (5, 32), (5, 31), (4, 30), (4, 31), (4, 32), (3, 32), (3, 31), (3, 30), (3, 29), (3, 28), (3, 27), (3, 26), (2, 27), (2, 28), (2, 29), (2, 30), (2, 31), (4, 28), (4, 27), (4, 26), (4, 25), (4, 24), (4, 23), (4, 22),  # &

  (13, 37), (13, 38), (13, 39), (14, 40), (14, 39), (14, 38), (14, 37), (15, 38), (15, 39), (15, 40), (16, 40), (16, 39), (16, 38), (17, 36), (17, 37), (17, 38), (17, 39), (18, 39), (18, 38), (18, 37), (18, 36), (18, 35), (18, 34), (18, 33), (18, 32), (18, 31), (19, 26), (19, 27), (19, 28), (19, 29), (19, 30), (19, 31), (19, 32), (19, 33), (19, 34), (19, 35), (19, 36), (19, 37), (19, 38), (20, 36), (20, 35), (20, 34), (20, 33), (20, 32), (20, 31), (20, 30), (20, 29), (20, 28), (20, 27), (20, 26), (20, 25), (20, 24), (21, 24), (21, 25), (21, 26), (21, 27), (21, 28), (21, 29), (21, 30), (21, 31), (22, 26,), (22, 25,), (22, 24,),  # j

  (28,20,),(28,21,),(29,21,),(29,20,),(29,19,),(30,19,),(30,20,),  # .1

  (21,20,),(21,21,),(22,21,),(22,20,),(22,19,),(23,19,),(23,20,),  # .2

  (24, 34), (24, 35), (25, 35), (25, 34), (25, 33), (25, 32), (25, 31), (26, 26), (26, 27), (26, 28), (26, 29), (26, 30), (26, 31), (26, 32), (26, 33), (26, 34), (26, 35), (27, 35), (27, 34), (27, 33), (27, 32), (27, 31), (27, 30), (27, 29), (27, 28), (27, 27), (27, 26), (27, 25), (27, 24), (28, 24), (28, 25), (28, 26), (28, 27), (28, 28), (28, 29), (28, 30), (28, 31), (29, 26), (29, 25), (29, 24),  # i

  (31, 34), (31, 35), (32, 35), (32, 34), (32, 33), (32, 32), (32, 31), (33, 26), (33, 27), (33, 28), (33, 29), (33, 30), (33, 31), (33, 32), (33, 33), (33, 34), (33, 35), (34, 35), (34, 34), (34, 33), (34, 32), (34, 31), (34, 30), (34, 29), (34, 28), (34, 27), (34, 26), (34, 25), (34, 24), (35, 24), (35, 25), (35, 26), (35, 27), (35, 28), (35, 29), (35, 30), (35, 31), (36, 28), (36, 27), (36, 26), (37, 25), (37, 26), (37, 27), (38, 26), (38, 25), (38, 24), (39, 24), (39, 25), (39, 26), (39, 30), (39, 31), (39, 32), (39, 33), (39, 34), (39, 35), (38, 35), (38, 34), (40, 35), (40, 34), (40, 33), (40, 32), (40, 31), (40, 30), (40, 29), (40, 28), (40, 27), (40, 26), (40, 25), (40, 24), (41, 24), (41, 25), (41, 26), (41, 28), (41, 28), (41, 29), (41, 30), (41, 31), (41, 32), (41, 33), (41, 34), (42, 30), (42, 29), (42, 28), (42, 27), (42, 26), (42, 25), (43, 26), (43, 27), (44, 27), (44, 26), (44, 25), (45, 24), (45, 25), (45, 26), (45, 33), (45, 34), (45, 35), (44, 35), (46, 35), (46, 34), (46, 33), (46, 32), (46, 31), (46, 30), (46, 29), (46, 28), (46, 27), (46, 26), (46, 25), (46, 24), (47, 24), (47, 25), (47, 26), (47, 27), (47, 28), (47, 29), (47, 30), (47, 31), (47, 32), (47, 33), (47, 34), (47, 35), (48, 33), (48, 32), (48, 31), (48, 30), (48, 29), (48, 28), (48, 27), (48, 26), (48, 25), (49, 26), (49, 27), (49, 28), (49, 29),  # m
]

INV_COORDS = {}

DIST = bytearray(len(COORDS))

WAVE = bytearray(256)

@micropython.native
def mode_blank(t, i, l, rgb):
  pass

@micropython.native
def mode_rainbow_letters(t, i, l, rgb):
  if l == t % 8:
    rgb[0], rgb[1], rgb[2] = RAINBOW_COLORS[t%len(RAINBOW_COLORS)]

@micropython.native
def mode_fire(t, i, l, rgb):
  i = (t + i) % 13827
  rgb[0] = (i * 37 + i * i * 17 + i) % 200
  rgb[1] = (i * 61 + i * i * 31 + i) % (1+rgb[0]//2)

@micropython.native
def mode_green_sparkle(t, i, l, rgb):
  rgb[1] = WAVE[(t*10 + i*400) % len(WAVE)]

@micropython.native
def mode_scan(t, i, l, rgb):
  if COORDS[i][1] == t%41:
    rgb[0] = 255
  if COORDS[i][0] == t%50:
    rgb[1] = 255

@micropython.native
def mode_wave(t, i, l, rgb):
  rgb[1] = WAVE[(t + DIST[i]) % len(WAVE)]

@micropython.native
def mode_rainbow_x(t, i, l, rgb):
  h = t*2 + COORDS[i][0]
  rainbow(h % 120, rgb)

cutoffs = {
  80:  1, # e
  184: 2, # d
  288: 3, # d
  381: 4, # y
  470: 5, # &
  533: 6, # j
  540: 5, # i.
  547: 6, # j.
  587: 7, # i
  722: 0  # m
}

LETTER_INDEXES = [
  (80,  1,), # e
  (184, 2,), # d
  (288, 3,), # d
  (381, 4,), # y
  (470, 5,), # &
  (533, 6,), # j
  (540, 5,), # i.
  (547, 6,), # j.
  (587, 7,), # i
  (722, 0),  # m
]

MODES = [
  mode_blank,
  mode_rainbow_letters,
  mode_fire,
  mode_green_sparkle,
  mode_scan,
  mode_wave,
  mode_rainbow_x,
]

MODE_DELAYS = [
  100,
  0,
  0,
  0,
  0,
  0,
  0,
]

mode_index = 2

def next_mode():
  global mode_index
  mode_index = (mode_index + 1) % len(MODES)

pyb.Switch().callback(next_mode)

@micropython.native
def update(t: int):
  gc.disable()
  gc.collect()
  p = 4
  s = pyb.millis()
  l = 0
  li = 0
  ln = LETTER_INDEXES[li][0]
  current_mode = MODES[mode_index]
  rgb = bytearray(3)
  for i in range(int(LEDS)):
    if i == ln:
      l = LETTER_INDEXES[li][1]
      li = (li + 1) % len(LETTER_INDEXES)
      ln = LETTER_INDEXES[li][0]
    rgb[0], rgb[1], rgb[2] = 0, 0, 0
    current_mode(t, i, l, rgb)
    pixeldata[p] = 0b11100000 | 0b00100
    p += 1
    pixeldata[p] = rgb[2]
    p += 1
    pixeldata[p] = rgb[1]
    p += 1
    pixeldata[p] = rgb[0]
    p += 1
  n = pyb.elapsed_millis(s)
  gc.enable()
  strip.send(pixeldata)
  print(n)

def clear():
  buf = pixeldata
  p = 4
  for i in range(int(LEDS)):
    buf[p] = 0b11100000
    p += 1
    buf[p] = 0
    p += 1
    buf[p] = 0
    p += 1
    buf[p] = 0
    p += 1
  strip.send(pixeldata)

def vert(x):
  buf = pixeldata
  p = 4
  for i in range(int(LEDS)):
    buf[p] = 0b11101000
    p += 1
    buf[p] = 255 if COORDS[i][0] == x else 0
    p += 1
    buf[p] = 0
    p += 1
    buf[p] = 0
    p += 1
  strip.send(pixeldata)

def horiz(y):
  buf = pixeldata
  p = 4
  for i in range(int(LEDS)):
    buf[p] = 0b11101000
    p += 1
    buf[p] = 255 if COORDS[i][1] == y else 0
    p += 1
    buf[p] = 0
    p += 1
    buf[p] = 0
    p += 1
  strip.send(pixeldata)

@micropython.native
def main():
  for i in range(4):
    pixeldata[i] = 0
    for j in range(20):
      pixeldata[LEDS*4 + j*4 + i] = 0xff

  for i in range(int(LEDS)):
    x,y = COORDS[i]
    INV_COORDS[(x,y)] = i
    DIST[i] = int((x**2 + y**2)**0.5 * 20)

  for i in range(7):
    rgb = [0,0,0]
    rainbow(i * 120 // 7, rgb)
    RAINBOW_COLORS.append(rgb)

  for i in range(len(WAVE)):
    WAVE[i] = int(64 * (1 + math.sin(math.pi * 2 * i / len(WAVE))))

  t = 0
  while True:
    utime.sleep_ms(MODE_DELAYS[mode_index])
    #if t % 20 == 0:
    #  dist_mm[di] = dist[di].distance_mm()
    #  print(di, dist_mm[di])
    #  di = (di + 1) % len(dist)
    update(t)
    t += 1

main()
